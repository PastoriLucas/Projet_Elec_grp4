package Final;

import gnu.io.*;
import java.awt.Color;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.TooManyListenersException;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;

public class Controller implements SerialPortEventListener {
	Model model = new Model();
	
	public void searchForPorts()
    {
        model.ports = CommPortIdentifier.getPortIdentifiers();

        while (model.ports.hasMoreElements())
        {
            CommPortIdentifier curPort = (CommPortIdentifier)model.ports.nextElement();

            //get only serial ports
            if (curPort.getPortType() == CommPortIdentifier.PORT_SERIAL)
            {
            	model.window.cboxPorts.addItem(curPort.getName());
                model.portMap.put(curPort.getName(), curPort);
            }
        }
    }
	
	public void connect()
    {
        String selectedPort = (String)model.window.cboxPorts.getSelectedItem();
        model.selectedPortIdentifier = (CommPortIdentifier)model.portMap.get(selectedPort);

        CommPort commPort = null;

        try
        {
            //the method below returns an object of type CommPort
            commPort = model.selectedPortIdentifier.open("TigerControlPanel", model.TIMEOUT);
            //the CommPort object can be casted to a SerialPort object
            model.serialPort = (SerialPort)commPort;

            //for controlling GUI elements
            model.bConnected = true;

            //logging
            model.logText = selectedPort + " opened successfully.";
            model.window.resultat.setForeground(Color.black);
            model.window.resultat.append(model.logText + "n");

        }
        catch (PortInUseException e)
        {
        	model.logText = selectedPort + " is in use. (" + e.toString() + ")";

        	model.window.resultat.setForeground(Color.RED);
        	model.window.resultat.append(model.logText + "n");
        }
        catch (Exception e)
        {
        	model.logText = "Failed to open " + selectedPort + "(" + e.toString() + ")";
        	model.window.txtLog.append(model.logText + "n");
        	model.window.txtLog.setForeground(Color.RED);
        }
    }
	
	//open the input and output streams
    //pre style="font-size: 11px;": an open port
    //post: initialized input and output streams for use to communicate data
    public boolean initIOStream()
    {
        //return value for whether opening the streams is successful or not
        boolean successful = false;

        try {
            //
            model.input = model.serialPort.getInputStream();
            model.output = model.serialPort.getOutputStream();
            writeData(0, 0);

            successful = true;
            return successful;
        }
        catch (IOException e) {
        	model.logText = "I/O Streams failed to open. (" + e.toString() + ")";
        	model.window.txtLog.setForeground(Color.red);
        	model.window.txtLog.append(model.logText + "n");
            return successful;
        }
    }
    
  //starts the event listener that knows whenever data is available to be read
    //pre style="font-size: 11px;": an open serial port
    //post: an event listener for the serial port that knows when data is received
    public void initListener()
    {
        try
        {
            model.serialPort.addEventListener(this);
            model.serialPort.notifyOnDataAvailable(true);
        }
        catch (TooManyListenersException e)
        {
        	model.logText = "Too many listeners. (" + e.toString() + ")";
        	model.window.txtLog.setForeground(Color.red);
        	model.window.txtLog.append(model.logText + "n");
        }
    }

    
  //disconnect the serial port
    //pre style="font-size: 11px;": an open serial port
    //post: closed serial port
    public void disconnect()
    {
        //close the serial port
        try
        {
            writeData(0, 0);

            model.serialPort.removeEventListener();
            model.serialPort.close();
            model.input.close();
            model.output.close();
            setConnected(false);
            model.window.keybindingController.toggleControls();

            model.logText = "Disconnected.";
            model.window.txtLog.setForeground(Color.red);
            model.window.txtLog.append(logText + "n");
        }
        catch (Exception e)
        {
        	model.logText = "Failed to close " + model.serialPort.getName()
                              + "(" + e.toString() + ")";
        	model.window.txtLog.setForeground(Color.red);
        	model.window.txtLog.append(model.logText + "n");
        }
    }
    
  //what happens when data is received
    //pre style="font-size: 11px;": serial event is triggered
    //post: processing on the data it reads
    public void serialEvent(SerialPortEvent evt) {
        if (evt.getEventType() == SerialPortEvent.DATA_AVAILABLE)
        {
            try
            {
                byte singleData = (byte)model.input.read();

                if (singleData != model.NEW_LINE_ASCII)
                {
                	model.logText = new String(new byte[] {singleData});
                	model.window.txtLog.append(model.logText);
                }
                else
                {
                	model.window.txtLog.append("n");
                }
            }
            catch (Exception e)
            {
            	model.logText = "Failed to read data. (" + e.toString() + ")";
            	model.window.txtLog.setForeground(Color.red);
            	model.window.txtLog.append(model.logText + "n");
            }
        }
    }
    
  //method that can be called to send data
    //pre style="font-size: 11px;": open serial port
    //post: data sent to the other device
    public void writeData(int leftThrottle, int rightThrottle)
    {
        try
        {
            model.output.write(leftThrottle);
            model.output.flush();
            //this is a delimiter for the data
            model.output.write(model.DASH_ASCII);
            model.output.flush();

            model.output.write(rightThrottle);
            model.output.flush();
            //will be read as a byte so it is a space key
            model.output.write(model.SPACE_ASCII);
            model.output.flush();
        }
        catch (Exception e)
        {
        	model.logText = "Failed to write data. (" + e.toString() + ")";
        	model.window.txtLog.setForeground(Color.red);
        	model.window.txtLog.append(model.logText + "n");
        }
    }
}
