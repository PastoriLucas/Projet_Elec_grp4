package Final;

import gnu.io.*;
import java.awt.Color;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.TooManyListenersException;

public class Controller implements SerialPortEventListener {
	//passed from main GUI
    GUI window = null;

    //for containing the ports that will be found
    Enumeration ports = null;
    //map the port names to CommPortIdentifiers
    HashMap portMap = new HashMap();

    //this is the object that contains the opened port
    CommPortIdentifier selectedPortIdentifier = null;
    SerialPort serialPort = null;

    //input and output streams for sending and receiving data
    InputStream input = null;
    OutputStream output = null;

    //just a boolean flag that i use for enabling
    //and disabling buttons depending on whether the program
    //is connected to a serial port or not
    boolean bConnected = false;

    //the timeout value for connecting with the port
    final static int TIMEOUT = 2000;

    //some ascii values for for certain things
    final static int SPACE_ASCII = 32;
    final static int DASH_ASCII = 45;
    final static int NEW_LINE_ASCII = 10;

    //a string for recording what goes on in the program
    //this string is written to the GUI
	
	public void searchForPorts()
    {
        ports = CommPortIdentifier.getPortIdentifiers();

        while (ports.hasMoreElements())
        {
            CommPortIdentifier curPort = (CommPortIdentifier)ports.nextElement();

            //get only serial ports
            if (curPort.getPortType() == CommPortIdentifier.PORT_SERIAL)
            {
            	window.cboxPorts.addItem(curPort.getName());
                portMap.put(curPort.getName(), curPort);
            }
        }
    }
	
	public void connect()
    {
        String selectedPort = (String)window.cboxPorts.getSelectedItem();
        selectedPortIdentifier = (CommPortIdentifier)portMap.get(selectedPort);

        CommPort commPort = null;

        try
        {
            //the method below returns an object of type CommPort
            commPort = selectedPortIdentifier.open("TigerControlPanel", TIMEOUT);
            //the CommPort object can be casted to a SerialPort object
            serialPort = (SerialPort)commPort;

            //for controlling GUI elements
            bConnected = true;

            //logging
            System.out.println(selectedPort + " opened successfully."); 
            
        }
        catch (PortInUseException e)
        {
        	System.out.println(selectedPort + " is in use. (" + e.toString() + ")"); 
        }
        catch (Exception e)
        {
        	System.out.println("Failed to open " + selectedPort + "(" + e.toString() + ")") ;
        }
    }
	
	//open the input and output streams
    //pre style="font-size: 11px;": an open port
    //post: initialized input and output streams for use to communicate data
    public boolean initIOStream()
    {
        //return value for whether opening the streams is successful or not
        boolean successful = false;

        try {
            //
            input = serialPort.getInputStream();
            output = serialPort.getOutputStream();
            writeData(100);

            successful = true;
            return successful;
        }
        catch (IOException e) {
        	System.out.println("I/O Streams failed to open. (" + e.toString() + ")"); 
            return successful;
        }
    }
    
  //starts the event listener that knows whenever data is available to be read
    //pre style="font-size: 11px;": an open serial port
    //post: an event listener for the serial port that knows when data is received
    public void initListener()
    {
        try
        {
            serialPort.addEventListener(this);
            serialPort.notifyOnDataAvailable(true);
        }
        catch (TooManyListenersException e)
        {
        	System.out.println("Too many listeners. (" + e.toString() + ")");
        }
    }

    
  //disconnect the serial port
    //pre style="font-size: 11px;": an open serial port
    //post: closed serial port
    public void disconnect()
    {
        //close the serial port
        try
        {
            writeData(100);

            serialPort.removeEventListener();
            serialPort.close();
            input.close();
            output.close();
            bConnected = false;

            System.out.println("Disconnected.");
        }
        catch (Exception e)
        {
        	System.out.println("Failed to close " + serialPort.getName()+ "(" + e.toString() + ")"); 
        }
    }
    
  //what happens when data is received
    //pre style="font-size: 11px;": serial event is triggered
    //post: processing on the data it reads
    public void serialEvent(SerialPortEvent evt) {
        if (evt.getEventType() == SerialPortEvent.DATA_AVAILABLE)
        {
            try
            {
                byte singleData = (byte)input.read();

                if (singleData != NEW_LINE_ASCII)
                {
                	window.resultat.setText(new String(new byte[] {singleData})); 
                }
                else
                {
                	System.out.println("error");
                }
            }
            catch (Exception e)
            {
            	System.out.println("Failed to read data. (" + e.toString() + ")"); 
            }
        }
    }
    
  //method that can be called to send data
    //pre style="font-size: 11px;": open serial port
    //post: data sent to the other device
    public void writeData(int seuil)
    {
        try
        {
            output.write(seuil);
            output.flush();
            //this is a delimiter for the data
            output.write(DASH_ASCII);
            output.flush();

            //will be read as a byte so it is a space key
            output.write(SPACE_ASCII);
            output.flush();
            
            window.labelAfficherSeuil.setText("Seuil maximal actuel : " + seuil + " cm");
        }
        catch (Exception e)
        {
        	System.out.println("Failed to write data. (" + e.toString() + ")");
        }
    }
    
    public static void main(String args[]){
    	Controller test = new Controller();
    }
}
